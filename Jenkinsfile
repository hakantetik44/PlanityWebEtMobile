pipeline {
    agent any

    tools {
        maven 'maven'
        jdk 'JDK17'
        allure 'Allure'
    }

    environment {
        // Configuration de Base
        JAVA_HOME = "/usr/local/opt/openjdk@17"
        M2_HOME = tool 'maven'
        PATH = "${JAVA_HOME}/bin:${M2_HOME}/bin:${PATH}"
        MAVEN_OPTS = '-Xmx3072m'

        // Informations du Projet
        PROJECT_NAME = 'Planity Web Et Mobile BDD Automation Tests'
        PROJECT_VERSION = '1.0.0'
        TEAM_NAME = 'Quality Assurance'

        // R√©pertoires
        TIMESTAMP = new Date().format('yyyy-MM-dd_HH-mm-ss')
        ALLURE_RESULTS = 'target/allure-results'
        CUCUMBER_REPORTS = 'target/cucumber-reports'
        CUCUMBER_JSON_PATH = 'target/cucumber.json'
        EXCEL_REPORTS = 'target/rapports-tests'
        VIDEO_DIR = 'target/videos'

        // Configuration Vid√©o
        RECORD_VIDEO = 'true'
        VIDEO_NAME = "test-recording-${BUILD_NUMBER}.mp4"
        FFMPEG_PATH = '/usr/local/bin/ffmpeg'
        VIDEO_FRAME_RATE = '30'
        SCREEN_RESOLUTION = '1920x1080'
    }

    parameters {
        choice(
            name: 'BRANCH_NAME',
            choices: ['main', 'develop', 'staging', 'hakan'],
            description: 'S√©lectionnez la branche √† tester'
        )
        choice(
            name: 'PLATFORM_NAME',
            choices: ['Web', 'Android', 'iOS'],
            description: 'S√©lectionnez la plateforme de test'
        )
        choice(
            name: 'BROWSER',
            choices: ['chrome', 'firefox', 'safari'],
            description: 'S√©lectionnez le navigateur (pour Web uniquement)'
        )
    }
    stages {
            stage('Initialization') {
                steps {
                    script {
                        echo """‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë         üöÄ D√©marrage des Tests             ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"""

                        cleanWs()

                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: "*/${params.BRANCH_NAME}"]],
                            extensions: [[$class: 'CleanBeforeCheckout']],
                            userRemoteConfigs: [[url: 'https://github.com/hakantetik44/PlanityWebEtMobile.git']]
                        ])

                        sh """
                            mkdir -p ${ALLURE_RESULTS}
                            mkdir -p ${CUCUMBER_REPORTS}
                            mkdir -p ${EXCEL_REPORTS}
                            mkdir -p ${VIDEO_DIR}
                            chmod -R 777 ${VIDEO_DIR}

                            echo "üîß Configuration de l'environnement..."
                            cat << EOF > ${ALLURE_RESULTS}/environment.properties
    Platform=${params.PLATFORM_NAME}
    Browser=${params.BROWSER}
    Branch=${params.BRANCH_NAME}
    Environment=Production
    Video=Enabled
    EOF
                        """

                        // Configuration de l'enregistrement vid√©o
                        if (env.RECORD_VIDEO == 'true') {
                            sh '''#!/bin/bash
                                # V√©rification de ffmpeg
                                if [ -f "/usr/local/bin/ffmpeg" ]; then
                                    FFMPEG="/usr/local/bin/ffmpeg"
                                elif [ -f "/opt/homebrew/bin/ffmpeg" ]; then
                                    FFMPEG="/opt/homebrew/bin/ffmpeg"
                                else
                                    echo "‚ö†Ô∏è ffmpeg non trouv√©!"
                                    exit 1
                                fi

                                echo "üìπ ffmpeg trouv√©: $FFMPEG"

                                # D√©marrage de l'enregistrement
                                $FFMPEG -f avfoundation \
                                    -framerate 30 \
                                    -i "1:none" \
                                    -vcodec libx264 \
                                    -preset ultrafast \
                                    -pix_fmt yuv420p \
                                    "${WORKSPACE}/${VIDEO_DIR}/${VIDEO_NAME}" \
                                    2> "${WORKSPACE}/${VIDEO_DIR}/ffmpeg.log" &

                                echo $! > "${WORKSPACE}/${VIDEO_DIR}/video.pid"
                                echo "üìπ Enregistrement d√©marr√©, PID: $(cat ${WORKSPACE}/${VIDEO_DIR}/video.pid)"
                                sleep 2
                            '''
                        }
                    }
                }
            }

            stage('Test Execution') {
                steps {
                    script {
                        try {
                            echo 'üèóÔ∏è Ex√©cution des tests...'
                            sh """
                                ${M2_HOME}/bin/mvn clean test \
                                -Dtest=runner.TestRunner \
                                -DplatformName=${params.PLATFORM_NAME} \
                                -Dbrowser=${params.BROWSER} \
                                -Dcucumber.plugin="pretty,json:${CUCUMBER_JSON_PATH},html:${CUCUMBER_REPORTS},io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm" \
                                -Dallure.results.directory=${ALLURE_RESULTS}
                            """
                        } finally {
                            // Arr√™t de l'enregistrement vid√©o
                            if (env.RECORD_VIDEO == 'true') {
                                sh '''#!/bin/bash
                                    PID_FILE="${WORKSPACE}/${VIDEO_DIR}/video.pid"
                                    if [ -f "$PID_FILE" ]; then
                                        PID=$(cat "$PID_FILE")
                                        echo "üìπ Arr√™t de l'enregistrement: $PID"
                                        kill -2 $PID || true
                                        sleep 3
                                        rm "$PID_FILE"
                                    fi

                                    VIDEO_FILE="${WORKSPACE}/${VIDEO_DIR}/${VIDEO_NAME}"
                                    if [ -f "$VIDEO_FILE" ]; then
                                        echo "üìπ Vid√©o sauvegard√©e: $(ls -lh $VIDEO_FILE)"
                                    else
                                        echo "‚ö†Ô∏è Fichier vid√©o non trouv√©!"
                                        cat "${WORKSPACE}/${VIDEO_DIR}/ffmpeg.log"
                                    fi
                                '''
                            }
                        }
                    }
                }
                post {
                    always {
                        junit testResults: '**/target/surefire-reports/*.xml', allowEmptyResults: true
                    }
                }
            }
            stage('Reports') {
                        steps {
                            script {
                                try {
                                    echo 'üìä G√©n√©ration des rapports...'

                                    // Rapport Allure
                                    allure([
                                        includeProperties: true,
                                        jdk: '',
                                        properties: [],
                                        reportBuildPolicy: 'ALWAYS',
                                        results: [[path: "${ALLURE_RESULTS}"]]
                                    ])

                                    // Rapport Cucumber am√©lior√©
                                    cucumber(
                                        fileIncludePattern: '**/cucumber.json',
                                        jsonReportDirectory: 'target',
                                        reportTitle: 'üåü Planity Test Report',
                                        classifications: [
                                            [key: 'üè¢ Project', value: PROJECT_NAME],
                                            [key: 'üìå Version', value: PROJECT_VERSION],
                                            [key: 'üåø Branch', value: params.BRANCH_NAME],
                                            [key: 'üì± Platform', value: params.PLATFORM_NAME],
                                            [key: 'üåê Browser', value: params.BROWSER],
                                            [key: 'üîÑ Build', value: "#${BUILD_NUMBER}"],
                                            [key: 'üìÖ Date', value: new Date().format('dd/MM/yyyy HH:mm')],
                                            [key: '‚è±Ô∏è Duration', value: currentBuild.durationString],
                                            [key: 'üìπ Video', value: env.RECORD_VIDEO == 'true' ? 'Activ√©' : 'D√©sactiv√©']
                                        ]
                                    )

                                    // V√©rification et copie de la vid√©o
                                    sh """
                                        if [ -f "${VIDEO_DIR}/${VIDEO_NAME}" ]; then
                                            echo "üìπ Vid√©o trouv√©e: \$(ls -lh ${VIDEO_DIR}/${VIDEO_NAME})"
                                            cp ${VIDEO_DIR}/${VIDEO_NAME} ${ALLURE_RESULTS}/
                                        fi
                                    """

                                    // Archivage des artefacts essentiels
                                    archiveArtifacts(
                                        artifacts: """
                                            ${VIDEO_DIR}/**/*.mp4,
                                            ${VIDEO_DIR}/**/*.log,
                                            ${EXCEL_REPORTS}/**/*.xlsx
                                        """,
                                        allowEmptyArchive: true,
                                        fingerprint: true
                                    )

                                } catch (Exception e) {
                                    currentBuild.result = 'UNSTABLE'
                                    echo "‚ö†Ô∏è Erreur de g√©n√©ration des rapports: ${e.message}"
                                }
                            }
                        }
                    }
                }

                post {
                    always {
                        script {
                            def status = currentBuild.result ?: 'SUCCESS'
                            def emoji = status == 'SUCCESS' ? '‚úÖ' : status == 'UNSTABLE' ? '‚ö†Ô∏è' : '‚ùå'

                            echo """‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
            ‚ïë           üåü Rapport Final d'Ex√©cution           ‚ïë
            ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

            üè¢ Information Projet:
            ‚ñ™Ô∏è Nom: ${PROJECT_NAME}
            ‚ñ™Ô∏è Version: ${PROJECT_VERSION}
            ‚ñ™Ô∏è √âquipe: ${TEAM_NAME}

            üîÑ Information Build:
            ‚ñ™Ô∏è Num√©ro: #${BUILD_NUMBER}
            ‚ñ™Ô∏è Date: ${new Date().format('dd/MM/yyyy HH:mm')}
            ‚ñ™Ô∏è Dur√©e: ${currentBuild.durationString}

            üìà Rapports Disponibles:
            ‚ñ™Ô∏è üìä Allure: ${BUILD_URL}allure/
            ‚ñ™Ô∏è ü•í Cucumber: ${BUILD_URL}cucumber-html-reports/
            ‚ñ™Ô∏è üìπ Vid√©os: ${BUILD_URL}artifact/${VIDEO_DIR}/
            ‚ñ™Ô∏è üìë Excel: ${BUILD_URL}artifact/${EXCEL_REPORTS}/

            ${emoji} Statut Final: ${status}
            """
                        }
                        cleanWs()
                    }

                    success {
                        echo '‚úÖ Pipeline termin√© avec succ√®s!'
                    }

                    failure {
                        echo '‚ùå Pipeline termin√© en √©chec!'
                    }
                }
            }